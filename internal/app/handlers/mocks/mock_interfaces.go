// Code generated by MockGen. DO NOT EDIT.
// Source: yandex_gophermart/internal/app/handlers (interfaces: StorageInt,JWTHelperInt)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageInt is a mock of StorageInt interface.
type MockStorageInt struct {
	ctrl     *gomock.Controller
	recorder *MockStorageIntMockRecorder
}

// MockStorageIntMockRecorder is the mock recorder for MockStorageInt.
type MockStorageIntMockRecorder struct {
	mock *MockStorageInt
}

// NewMockStorageInt creates a new mock instance.
func NewMockStorageInt(ctrl *gomock.Controller) *MockStorageInt {
	mock := &MockStorageInt{ctrl: ctrl}
	mock.recorder = &MockStorageIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInt) EXPECT() *MockStorageIntMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockStorageInt) CheckUser(arg0, arg1 string, arg2 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockStorageIntMockRecorder) CheckUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockStorageInt)(nil).CheckUser), arg0, arg1, arg2)
}

// SaveNewOrder mocks base method.
func (m *MockStorageInt) SaveNewOrder(arg0, arg1 int, arg2 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewOrder indicates an expected call of SaveNewOrder.
func (mr *MockStorageIntMockRecorder) SaveNewOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewOrder", reflect.TypeOf((*MockStorageInt)(nil).SaveNewOrder), arg0, arg1, arg2)
}

// SaveUser mocks base method.
func (m *MockStorageInt) SaveUser(arg0, arg1 string, arg2 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockStorageIntMockRecorder) SaveUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockStorageInt)(nil).SaveUser), arg0, arg1, arg2)
}

// MockJWTHelperInt is a mock of JWTHelperInt interface.
type MockJWTHelperInt struct {
	ctrl     *gomock.Controller
	recorder *MockJWTHelperIntMockRecorder
}

// MockJWTHelperIntMockRecorder is the mock recorder for MockJWTHelperInt.
type MockJWTHelperIntMockRecorder struct {
	mock *MockJWTHelperInt
}

// NewMockJWTHelperInt creates a new mock instance.
func NewMockJWTHelperInt(ctrl *gomock.Controller) *MockJWTHelperInt {
	mock := &MockJWTHelperInt{ctrl: ctrl}
	mock.recorder = &MockJWTHelperIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTHelperInt) EXPECT() *MockJWTHelperIntMockRecorder {
	return m.recorder
}

// BuildNewJWTString mocks base method.
func (m *MockJWTHelperInt) BuildNewJWTString(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildNewJWTString", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildNewJWTString indicates an expected call of BuildNewJWTString.
func (mr *MockJWTHelperIntMockRecorder) BuildNewJWTString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildNewJWTString", reflect.TypeOf((*MockJWTHelperInt)(nil).BuildNewJWTString), arg0)
}

// GetUserID mocks base method.
func (m *MockJWTHelperInt) GetUserID(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockJWTHelperIntMockRecorder) GetUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockJWTHelperInt)(nil).GetUserID), arg0)
}
